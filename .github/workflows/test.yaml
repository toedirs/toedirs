name: Run Tests
on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  fmt:
    name: Leptosfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        id: cache-cargo-leptosfmt
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-fmt
      - uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: nightly-2024-04-04
          targets: wasm32-unknown-unknown,x86_64-unknown-linux-gnu
      - name: install leptosfmt
        if: steps.cache-cargo-leptosfmt.outputs.cache-hit != 'true'
        run: cargo install --force --locked leptosfmt@0.1.18 
      - name: enforce formatting
        run: leptosfmt --check src
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        id: cache-cargo-clippy
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-clippy
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy
          toolchain: nightly-2024-04-04
          targets: wasm32-unknown-unknown,x86_64-unknown-linux-gnu
      - name: check clippy
        run: cargo clippy -- -D warnings
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [fmt, clippy]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        id: cache-cargo-test
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-test
      - uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: nightly-2024-04-04
          targets: wasm32-unknown-unknown,x86_64-unknown-linux-gnu
      - name: install leptos
        if: steps.cache-cargo-test.outputs.cache-hit != 'true'
        run: |
          cargo install --force --locked cargo-leptos@0.2.16
          cargo install --force --locked sqlx-cli@0.7.4
      - name: test sqlx
        run: cargo sqlx prepare --check -- --all-targets --all-features
      - name: run tests
        run: cargo leptos test      
  end2end:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    needs: [test]
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_DB: toedi
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        id: cache-cargo-end2end
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-end2end
      - uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: nightly-2024-04-04
          targets: wasm32-unknown-unknown,x86_64-unknown-linux-gnu
      - name: install leptos
        if: steps.cache-cargo-end2end.outputs.cache-hit != 'true'
        run: |
          cargo install --force --locked cargo-leptos@0.2.16
          cargo install --force --locked sqlx-cli@0.7.4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Install dependencies
        run: |
          npm ci
        working-directory: ./end2end
        env:
          CI: 'true'
      - name: Install Playwright Browsers
        run: |
          npx playwright install --with-deps
        working-directory: ./end2end
        env:
          CI: 'true'
      - name: run migrations
        run: sqlx migrate run
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:${{ job.services.postgres.ports[5432] }}/toedi
      - name: run end2end tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:${{ job.services.postgres.ports[5432] }}/toedi
          CI: 'true'
        run: cargo leptos end-to-end --release    
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: end2end/playwright-report/
          retention-days: 30
